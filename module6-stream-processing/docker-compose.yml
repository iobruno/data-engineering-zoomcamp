version: "3.9" 

x-cp-kafka-image: &cp-kafka-image confluentinc/cp-kafka:${CONFLUENT_PLATFORM_VERSION:-7.6.0}
x-cp-zookeeper-image: &cp-zookeeper-image confluentinc/cp-zookeeper:${CONFLUENT_PLATFORM_VERSION:-7.6.0}
x-cp-schema-registry-image: &cp-schema-registry-image confluentinc/cp-schema-registry:${CONFLUENT_PLATFORM_VERSION:-7.6.0}
x-cp-rest-proxy-image: &cp-restproxy-image confluentinc/cp-kafka-rest:${CONFLUENT_PLATFORM_VERSION:-7.6.0}
x-cp-ksqldb-server-image: &cp-ksqldb-server-image confluentinc/cp-ksqldb-server:${CONFLUENT_PLATFORM_VERSION:-7.6.0}
x-cp-ksqldb-cli-image: &cp-ksqldb-cli-image confluentinc/cp-ksqldb-cli:${CONFLUENT_PLATFORM_VERSION:-7.6.0}

x-depends-on-kafka-brokers:
  depends_on: &depends-on-kafka-brokers
    broker0: 
      condition: service_healthy
    broker1: 
      condition: service_healthy
    broker2: 
      condition: service_healthy

x-depends-on-kafka-cluster:
  depends_on: &depends-on-kafka-cluster
    <<: *depends-on-kafka-brokers
    schemaregistry: 
      condition: service_healthy

x-kafka-common: 
  &kafka-common
  image: *cp-kafka-image
  environment: &kafka-common-env
    KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT_INTERNAL'
    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT'
    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
    KAFKA_DELETE_TOPIC_ENABLE: true
  depends_on:
    zookeeper: 
      condition: service_healthy
  healthcheck:
    test: ["CMD-SHELL", "cub kafka-ready -b localhost:29092 1 10 || exit 1"]
    start_period: 10s
    interval: 5s
    timeout: 10s
    retries: 3
  restart: on-failure:5

x-ksqldb-common:
  &ksqldb-common
  image: *cp-ksqldb-server-image
  environment:
    &ksqldb-common-env
    KSQL_LISTENERS: 'http://0.0.0.0:8088'
    KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: true
    KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: true
  depends_on:
    <<: *depends-on-kafka-brokers
  restart: on-failure:5

services:
  zookeeper:
    image: *cp-zookeeper-image
    container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 5
    ports:
      - '2181:2181'
    volumes:
      - ${ZK_DATA:-./volumes/zk_data}:/var/lib/zookeeper/data
      - ${ZK_LOGS:-./volumes/zk_logs}:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD-SHELL", "cub zk-ready localhost:2181 30 || exit 1"]
      interval: 10s
      timeout: 30s
      retries: 10
    restart: on-failure:5

  broker0:
    <<: *kafka-common
    container_name: kafka_broker0
    hostname: broker0
    environment:
      <<: *kafka-common-env
      KAFKA_BROKER_ID: 0
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker0:29092'
    ports:
      - '9092:9092'
    volumes:
      - ${KAFKA_DATA:-./volumes/kafka}/broker0:/var/lib/kafka/data

  broker1:
    <<: *kafka-common
    container_name: kafka_broker1
    hostname: broker1
    environment:
      <<: *kafka-common-env
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9192,PLAINTEXT_INTERNAL://broker1:29092'
    ports:
      - '9192:9192'
    volumes:
      - ${KAFKA_DATA:-./volumes/kafka}/broker1:/var/lib/kafka/data

  broker2:
    <<: *kafka-common
    container_name: kafka_broker2
    hostname: broker2
    environment:
      <<: *kafka-common-env
      KAFKA_BROKER_ID: 2
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://localhost:9292,PLAINTEXT_INTERNAL://broker2:29092'
    ports:
      - '9292:9292'
    volumes:
      - ${KAFKA_DATA:-./volumes/kafka}/broker2:/var/lib/kafka/data

  schemaregistry:
    image: *cp-schema-registry-image
    container_name: schemaregistry
    hostname: schemaregistry
    environment:
      SCHEMA_REGISTRY_HOST_NAME: 'schemaregistry'
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT_INTERNAL://broker0:29092,PLAINTEXT_INTERNAL://broker1:29092,PLAINTEXT_INTERNAL://broker2:29092'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8081'
      SCHEMA_REGISTRY_DEBUG: true
    ports:
      - '8081:8081'
    depends_on: *depends-on-kafka-brokers
    healthcheck:
      test: ["CMD-SHELL", "cub sr-ready localhost 8081 30 || exit 1"]
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 3
    restart: on-failure:5

  kafkarest:
    image: *cp-restproxy-image
    container_name: kafkarest
    hostname: kafkarest
    environment:
      KAFKA_REST_HOST_NAME: 'restproxy'
      KAFKA_REST_BOOTSTRAP_SERVERS: 'PLAINTEXT_INTERNAL://broker0:29092,PLAINTEXT_INTERNAL://broker1:29092,PLAINTEXT_INTERNAL://broker2:29092'
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8082'
    ports:
      - '8082:8082'
    depends_on: *depends-on-kafka-cluster
    healthcheck:
      test: ["CMD-SHELL", "cub kr-ready localhost 8082 30 || exit 1"]
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 3
    restart: on-failure:5

  ksqldb0:
    <<: *ksqldb-common
    container_name: ksqldb0
    hostname: ksqldb0
    environment:
      <<: *ksqldb-common-env
      KSQL_KSQL_SERVICE_ID: 'ksqldb0'
      KSQL_BOOTSTRAP_SERVERS: 'broker0:29092,broker1:29092,broker2:29092'
      KSQL_KSQL_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
    ports:
      - '8088:8088'
    depends_on: *depends-on-kafka-cluster
    healthcheck:
      test: ["CMD-SHELL", "cub ksql-server-ready localhost 8088 30 || exit 1"]
      interval: 10s
      timeout: 30s
      retries: 5
    restart: on-failure:5

  ksqlcli:
    image: *cp-ksqldb-cli-image
    container_name: ksqlcli
    hostname: ksqlcli
    entrypoint: /bin/bash
    tty: true
    depends_on:
      ksqldb0:
        condition: service_healthy
    restart: on-failure:5
 
  # Conduktor Platform Docs:
  # - https://docs.conduktor.io/platform/configuration/env-variables
  # - https://docs.conduktor.io/platform/installation/hardware
  conduktor:
    image: conduktor/conduktor-platform:1.17.3
    container_name: conduktor
    hostname: conduktor
    environment:
      CDK_CLUSTERS_0_ID: 'warp'
      CDK_CLUSTERS_0_NAME: 'cp-kafka-in-docker'
      CDK_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker0:29092,broker1:29092,broker2:29092'
      CDK_CLUSTERS_0_SCHEMAREGISTRY_ID: 'cp-schema-registry'
      CDK_CLUSTERS_0_SCHEMAREGISTRY_URL: 'http://schemaregistry:8081'
      CDK_ADMIN_EMAIL: 'admin@conduktor.io'
      CDK_ADMIN_PASSWORD: 'conduktor'
      CDK_LISTENING_PORT: 8080
      RUN_MODE: nano
    ports:
      - '8080:8080'
    depends_on: *depends-on-kafka-cluster
    restart: on-failure:5
