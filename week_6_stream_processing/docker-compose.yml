x-cp-kafka-image: &cp-kafka-image confluentinc/cp-kafka:${CONFLUENT_PLATFORM_VERSION:-7.4.3}
x-cp-zookeeper-image: &cp-zookeeper-image confluentinc/cp-zookeeper:${CONFLUENT_PLATFORM_VERSION:-7.4.3}
x-cp-schema-registry-image: &cp-schema-registry-image confluentinc/cp-schema-registry:${CONFLUENT_PLATFORM_VERSION:-7.4.3}
x-cp-ksqldb-server-image: &cp-ksqldb-server-image confluentinc/cp-ksqldb-server:${CONFLUENT_PLATFORM_VERSION:-7.4.3}
x-cp-ksqldb-cli-image: &cp-ksqldb-cli-image confluentinc/cp-ksqldb-cli:${CONFLUENT_PLATFORM_VERSION:-7.4.3}
x-cp-rest-proxy-image: &cp-restproxy-image confluentinc/cp-kafka-rest:${CONFLUENT_PLATFORM_VERSION:-7.4.3}

x-depends-on-kafka-brokers:
  depends_on: &depends-on-kafka-brokers
    kafka0:
      condition: service_started
    kafka1:
      condition: service_started
    kafka2:
      condition: service_started
      
x-depends-on-kafka-cluster:
  <<: *depends-on-kafka-brokers
  depends_on: &depends-on-kafka-cluster
    schemaregistry:
      condition: service_started

x-kafka-common: 
  &kafka-common
  image: *cp-kafka-image
  restart: on-failure:5
  environment: 
    &kafka-common-env
    KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
    KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
    KAFKA_DELETE_TOPIC_ENABLE: true
  depends_on:
    - zookeeper

x-ksqldb-common: 
  &ksqldb-common
  image: *cp-ksqldb-server-image
  restart: on-failure:5
  environment:
    &ksqldb-common-env
    KSQL_LISTENERS: 'http://0.0.0.0:8088'
    KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: true
    KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: true
  depends_on:
    <<: *depends-on-kafka-cluster

version: "3.9"
services:
  zookeeper:
    image: *cp-zookeeper-image
    container_name: zookeeper
    restart: on-failure:5
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 5
    ports:
      - '2181:2181'
    volumes:
      - ./volumes/zk-data:/var/lib/zookeeper/data
      - ./volumes/zk-txn-logs:/var/lib/zookeeper/log

  kafka0:
    <<: *kafka-common
    container_name: kafka0
    environment:
      <<: *kafka-common-env
      KAFKA_BROKER_ID: 0
      KAFKA_LISTENERS: 'INTERNAL://kafka0:29092,EXTERNAL://:9092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka0:29092,EXTERNAL://127.0.0.1:9092'
    ports:
      - '9092:9092'
    volumes:
      - ./volumes/kafka0:/var/lib/kafka/data

  kafka1:
    <<: *kafka-common
    container_name: kafka1
    environment:
      <<: *kafka-common-env
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: 'INTERNAL://kafka1:29192,EXTERNAL://:9192'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka1:29192,EXTERNAL://127.0.0.1:9192'
    ports:
      - '9192:9192'
    volumes:
      - ./volumes/kafka1:/var/lib/kafka/data

  kafka2:
    <<: *kafka-common
    container_name: kafka2
    environment:
      <<: *kafka-common-env
      KAFKA_BROKER_ID: 2
      KAFKA_LISTENERS: 'INTERNAL://kafka2:29292,EXTERNAL://:9292'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka2:29292,EXTERNAL://127.0.0.1:9292'
    ports:
      - '9292:9292'
    volumes:
      - ./volumes/kafka2:/var/lib/kafka/data

  schemaregistry:
    image: *cp-schema-registry-image
    container_name: schemaregistry
    restart: on-failure:5
    environment:
      SCHEMA_REGISTRY_HOST_NAME: 'schemaregistry'
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka0:29092,PLAINTEXT://kafka1:29192,PLAINTEXT://kafka2:29292'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:8081'
      SCHEMA_REGISTRY_DEBUG: true
    ports:
      - '8081:8081'
    depends_on:
      <<: *depends-on-kafka-brokers

  rest-proxy:
    image: *cp-restproxy-image
    container_name: cp-restproxy
    restart: on-failure:5
    environment:
      KAFKA_REST_HOST_NAME: 'restproxy'
      KAFKA_REST_BOOTSTRAP_SERVERS: 'PLAINTEXT://kafka0:29092,PLAINTEXT://kafka1:29192,PLAINTEXT://kafka2:29292'
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schemaregistry:8081'
      KAFKA_REST_LISTENERS: 'http://restproxy:8082'
    ports:
      - '8082:8082'
    depends_on:
      <<: *depends-on-kafka-cluster

  ksqldb0:
    <<: *ksqldb-common
    container_name: ksqldb0
    environment:
      <<: *ksqldb-common-env
      KSQL_BOOTSTRAP_SERVERS: 'kafka0:29092,kafka1:29192,kafka2:29292'
    depends_on:
      <<: *depends-on-kafka-cluster

  ksqlcli:
    image: *cp-ksqldb-cli-image
    container_name: ksqlcli
    restart: on-failure:5
    depends_on:
      <<: *depends-on-kafka-cluster
      ksqldb0: 
        condition: service_started
    entrypoint: /bin/sh
    tty: true

  # Conduktor Platform Docs:
  # - https://docs.conduktor.io/platform/configuration/env-variables
  # - https://docs.conduktor.io/platform/installation/hardware
  conduktor:
    container_name: conduktor
    image: conduktor/conduktor-platform:1.17.3
    restart: on-failure:5
    hostname: conduktor
    environment:
      - CDK_CLUSTERS_0_ID=warp
      - CDK_CLUSTERS_0_NAME=kafka-in-docker-cluster
      - CDK_CLUSTERS_0_BOOTSTRAPSERVERS=kafka0:29092,kafka1:29192,kafka2:29292
      - CDK_CLUSTERS_0_SCHEMAREGISTRY_ID=warp-registry
      - CDK_CLUSTERS_0_SCHEMAREGISTRY_URL=http://schemaregistry:8081
      - CDK_ADMIN_EMAIL=admin@conduktor.io
      - CDK_ADMIN_PASSWORD=admin
      - CDK_LISTENING_PORT=8080
      - RUN_MODE=nano
    ports:
      - '8080:8080'
    depends_on:
      <<: *depends-on-kafka-cluster
